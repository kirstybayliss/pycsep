.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_catalog_filtering.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_catalog_filtering.py:


.. tutorial-catalog-filtering

Catalogs operations
===================

This example demonstrates how to perform standard operations on a catalog. This example requires an internet
connection to access ComCat.

Overview:
    1. Load catalog from ComCat
    2. Create filtering parameters in space, magnitude, and time
    3. Filter catalog using desired filters
    4. Write catalog to standard CSEP format

Load required libraries
-----------------------

Most of the core functionality can be imported from the top-level :mod:`csep` package. Utilities are available from the
:mod:`csep.utils` subpackage.


.. code-block:: default


    import csep
    from csep.core import regions
    from csep.utils import time_utils, comcat








Load catalog
------------

PyCSEP provides access to the ComCat web API using :func:`csep.query_comcat`. This function requires a
:class:`datetime.datetime` to specify the start and end dates.


.. code-block:: default


    start_time = csep.utils.time_utils.strptime_to_utc_datetime('2019-01-01 00:00:00.0')
    end_time = csep.utils.time_utils.utc_now_datetime()
    catalog = csep.query_comcat(start_time, end_time)
    print(catalog)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fetched ComCat catalog in 8.28988766670227 seconds.

    Downloaded catalog from ComCat with following parameters
    Start Date: 2019-01-01 12:01:46.950000+00:00
    End Date: 2020-09-09 10:07:28.389000+00:00
    Min Latitude: 31.5003333 and Max Latitude: 42.7775
    Min Longitude: -125.3826667 and Max Longitude: -113.1295
    Min Magnitude: 2.5
    Found 5709 events in the ComCat catalog.

            Name: None
        
            Start Date: 2019-01-01 12:01:46.950000+00:00
            End Date: 2020-09-09 10:07:28.389000+00:00
        
            Latitude: (31.5003333, 42.7775)
            Longitude: (-125.3826667, -113.1295)
        
            Min Mw: 2.5
            Max Mw: 7.1
        
            Event Count: 5709
        




Filter to magnitude range
-------------------------

Use the :meth:`csep.core.catalogs.AbstractBaseCatalog.filter` to filter the catalog. The filter function uses the field
names stored in the numpy structured array. Standard fieldnames include 'magnitude', 'origin_time', 'latitude', 'longitude',
and 'depth'.


.. code-block:: default


    catalog = catalog.filter('magnitude >= 3.5')
    print(catalog)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


            Name: None
        
            Start Date: 2019-01-13 09:35:49.870000+00:00
            End Date: 2020-09-09 10:07:28.389000+00:00
        
            Latitude: (31.5158, 42.7775)
            Longitude: (-125.3826667, -113.4886667)
        
            Min Mw: 3.5
            Max Mw: 7.1
        
            Event Count: 773
        




Filter to desired time interval
-------------------------------

We need to define desired start and end times for the catalog using a time-string format. PyCSEP uses integer times for doing
time manipulations. Time strings can be converted into integer times using
:func:`csep.utils.time_utils.strptime_to_utc_epoch`. The :meth:`csep.core.catalog.AbstractBaseCatalog.filter` also
accepts a list of strings to apply multiple filters.


.. code-block:: default


    # create epoch times from time-string formats
    start_epoch = csep.utils.time_utils.strptime_to_utc_epoch('2019-07-06 03:19:54.040000')
    end_epoch = csep.utils.time_utils.strptime_to_utc_epoch('2019-09-21 03:19:54.040000')

    # filter catalog to magnitude ranges and times
    filters = [f'origin_time >= {start_epoch}', f'origin_time < {end_epoch}']
    catalog = catalog.filter(filters)
    print(catalog)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


            Name: None
        
            Start Date: 2019-01-13 09:35:49.870000+00:00
            End Date: 2019-09-19 09:59:46.580000+00:00
        
            Latitude: (31.5158, 41.1244)
            Longitude: (-125.1371667, -113.787)
        
            Min Mw: 3.5
            Max Mw: 7.1
        
            Event Count: 477
        




Filter to desired spatial region
--------------------------------

We use a circular spatial region with a radius of 3 average fault lengths as defined by the Wells and Coppersmith scaling
relationship. PyCSEP provides :func:`csep.utils.spatial.generate_aftershock_region` to create an aftershock region
based on the magnitude and epicenter of an event.

We use :func:`csep.utils.comcat.get_event_by_id` the ComCat API provided by the USGS to obtain the event information
from the M7.1 Ridgecrest mainshock.


.. code-block:: default


    m71_event_id = 'ci38457511'
    event = comcat.get_event_by_id(m71_event_id)
    m71_epoch = time_utils.datetime_to_utc_epoch(event.time)

    # build aftershock region
    aftershock_region = regions.generate_aftershock_region(event.magnitude, event.longitude, event.latitude)

    # apply new aftershock region and magnitude of completeness
    catalog = catalog.filter_spatial(aftershock_region).apply_mct(event.magnitude, m71_epoch)
    print(catalog)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/pycsep/pycsep/csep/core/catalogs.py:579: RuntimeWarning: divide by zero encountered in log10
      return m - 4.5 - 0.75 * numpy.log10(t)

            Name: None
        
            Start Date: 2019-07-04 17:02:55.340000+00:00
            End Date: 2019-09-08 14:07:23.350000+00:00
        
            Latitude: (35.448, 36.1823333)
            Longitude: (-117.8886667, -117.2796667)
        
            Min Mw: 3.5
            Max Mw: 6.4
        
            Event Count: 300
        




Write catalog
-------------

Use :meth:`csep.core.catalogs.AbstractBaseCatalog.write_ascii` to write the catalog into the comma separated value format.


.. code-block:: default

    catalog.write_ascii('2019-11-11-comcat.csv')








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.807 seconds)


.. _sphx_glr_download_tutorials_catalog_filtering.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: catalog_filtering.py <catalog_filtering.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: catalog_filtering.ipynb <catalog_filtering.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
