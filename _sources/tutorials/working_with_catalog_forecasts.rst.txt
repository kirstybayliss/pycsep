.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_working_with_catalog_forecasts.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_working_with_catalog_forecasts.py:


Working with catalog-based forecasts
====================================

This example shows some basic interactions with data-based forecasts. We will load in a forecast stored in the CSEP
data format, and compute the expected rates on a 0.1° x 0.1° grid covering the state of California. We will plot the
expected rates in the spatial cells.

Overview:
    1. Define forecast properties (time horizon, spatial region, etc).
    2. Compute the expected rates in space and magnitude bins
    3. Plot expected rates in the spatial cells

Load required libraries
-----------------------

Most of the core functionality can be imported from the top-level :mod:`csep` package. Utilities are available from the
:mod:`csep.utils` subpackage.


.. code-block:: default


    import numpy

    import csep
    from csep.core import regions
    from csep.utils import datasets








Load data forecast
---------------------

PyCSEP contains some basic forecasts that can be used to test of the functionality of the package. This forecast has already 
been filtered to the California RELM region.


.. code-block:: default


    forecast = csep.load_catalog_forecast(datasets.ucerf3_ascii_format_landers_fname)








Define spatial and magnitude regions
------------------------------------

Before we can compute the bin-wise rates we need to define a spatial region and a set of magnitude bin edges. The magnitude
bin edges # are the lower bound (inclusive) except for the last bin, which is treated as extending to infinity. We can
bind these # to the forecast object. This can also be done by passing them as keyword arguments
into :func:`csep.load_catalog_forecast`.


.. code-block:: default


    # Magnitude bins properties
    min_mw = 4.95
    max_mw = 8.95
    dmw = 0.1

    # Create space and magnitude regions
    magnitudes = regions.magnitude_bins(min_mw, max_mw, dmw)
    region = regions.california_relm_region()

    # Bind region information to the forecast (this will be used for binning of the catalogs)
    forecast.region = regions.create_space_magnitude_region(region, magnitudes)








Compute spatial event counts
----------------------------

The :class:`csep.core.forecasts.CatalogForecast` provides a method to compute the expected number of events in spatial cells. This 
requires a region with magnitude information. 


.. code-block:: default


    _ = forecast.get_expected_rates(verbose=True)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Processed 1 catalogs in 0.0019142627716064453 seconds
    Processed 2 catalogs in 0.0034084320068359375 seconds
    Processed 3 catalogs in 0.004663705825805664 seconds
    Processed 4 catalogs in 0.005767345428466797 seconds
    Processed 5 catalogs in 0.0068895816802978516 seconds
    Processed 6 catalogs in 0.008301973342895508 seconds
    Processed 7 catalogs in 0.00941014289855957 seconds
    Processed 8 catalogs in 0.010669469833374023 seconds
    Processed 9 catalogs in 0.012926816940307617 seconds
    Processed 10 catalogs in 0.014166593551635742 seconds
    Processed 20 catalogs in 0.026064157485961914 seconds
    Processed 30 catalogs in 0.03945326805114746 seconds
    Processed 40 catalogs in 0.05208945274353027 seconds
    Processed 50 catalogs in 0.06548166275024414 seconds
    Processed 60 catalogs in 0.07779335975646973 seconds
    Processed 70 catalogs in 0.08983755111694336 seconds
    Processed 80 catalogs in 0.10251593589782715 seconds
    Processed 90 catalogs in 0.11561417579650879 seconds
    Processed 100 catalogs in 0.12774372100830078 seconds
    Processed 200 catalogs in 0.24896597862243652 seconds
    Processed 300 catalogs in 0.39173126220703125 seconds
    Processed 400 catalogs in 0.5411334037780762 seconds
    Processed 500 catalogs in 0.7191329002380371 seconds
    Processed 600 catalogs in 0.8404326438903809 seconds
    Processed 700 catalogs in 0.9640018939971924 seconds
    Processed 800 catalogs in 1.147395133972168 seconds
    Processed 900 catalogs in 1.2681629657745361 seconds
    Processed 1000 catalogs in 1.3989217281341553 seconds
    Processed 2000 catalogs in 2.9343509674072266 seconds
    Processed 3000 catalogs in 4.419897079467773 seconds
    Processed 4000 catalogs in 5.927717447280884 seconds
    Processed 5000 catalogs in 7.386882305145264 seconds
    Processed 6000 catalogs in 8.869190692901611 seconds
    Processed 7000 catalogs in 10.383500099182129 seconds
    Processed 8000 catalogs in 11.807538747787476 seconds
    Processed 9000 catalogs in 13.354310989379883 seconds
    Processed 10000 catalogs in 14.79759693145752 seconds




Plot expected event counts
--------------------------

We can plot the expected event counts the same way that we plot a :class:`csep.core.forecasts.GriddedForecast`


.. code-block:: default


    ax = forecast.expected_rates.plot(plot_args={'clim': [-3.5, 0]})




.. image:: /tutorials/images/sphx_glr_working_with_catalog_forecasts_001.png
    :alt: ucerf3-landers
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.7.9/x64/lib/python3.7/site-packages/cartopy/mpl/gridliner.py:343: UserWarning: The .ylabels_right attribute is deprecated. Please use .right_labels to toggle visibility instead.
      warnings.warn('The .ylabels_right attribute is deprecated. Please '




The images holes in the image are due to under-sampling from the forecast.

Quick sanity check
------------------

The forecasts were filtered to the spatial region so all events should be binned. We loop through each data in the forecast and
count the number of events and compare that with the expected rates. The expected rate is an average in each space-magnitude bin, so
we have to multiply this value by the number of catalogs in the forecast.


.. code-block:: default


    total_events = 0
    for catalog in forecast:
        total_events += catalog.event_count
    numpy.testing.assert_allclose(total_events, forecast.expected_rates.sum() * forecast.n_cat)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  23.651 seconds)


.. _sphx_glr_download_tutorials_working_with_catalog_forecasts.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: working_with_catalog_forecasts.py <working_with_catalog_forecasts.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: working_with_catalog_forecasts.ipynb <working_with_catalog_forecasts.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
